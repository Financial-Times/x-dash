@import './themes';
@import './toggle-icon';

@mixin focusOutlineColor($focus-color) {
	// Apply :focus styles as a fallback
	// These styles will be applied to all browsers that don't use the polyfill, this includes browsers which support the feature natively.
	body:not(.js-focus-visible) &,
	html:not(.js-focus-visible) & {
		// Standardise focus styles.
		&:focus {
			outline: 2px solid $focus-color;
		}
	}

	// When the focus-visible polyfill is applied `.js-focus-visible` is added to the html dom node
	// (the body node in v4 of the 3rd party polyfill)

	// stylelint-disable-next-line selector-no-qualifying-type
	body.js-focus-visible &, // stylelint-disable-next-line selector-no-qualifying-type
	html.js-focus-visible & {
		// Standardise focus styles.
		// stylelint-disable-next-line selector-no-qualifying-type
		&.focus-visible {
			outline: 2px solid $focus-color;
		}
		// Disable browser default focus style.
		// stylelint-disable-next-line selector-no-qualifying-type
		&:focus:not(.focus-visible) {
			outline: 0;
		}
	}

	// These styles will be ignored by browsers which do not recognise the :focus-visible selector (as per the third bullet point in https://www.w3.org/TR/selectors-3/#Conformance)
	// If a browser supports :focus-visible we unset the :focus styles that were applied above
	// (within the html:not(.js-focus-visible) block).
	&:focus-visible,
	body:not(.js-focus-visible) &:focus,
	html:not(.js-focus-visible) &:focus {
		outline: unset;
	}

	// Styles given :focus-visible support. Extra selectors needed to match
	// previous `:focus` selector specificity.
	body:not(.js-focus-visible) &:focus-visible,
	html:not(.js-focus-visible) &:focus-visible,
	&:focus-visible {
		outline: 2px solid $focus-color;
	}
}

@mixin myftLozengeTheme($theme: standard, $with-toggle-icon: false) {
	@if $with-toggle-icon != false {
		@include myftToggleIcon($theme);
	}

	@include withTheme($theme) {
		background-color: transparent;
		border: 1px solid getThemeColor(background);
		color: getThemeColor(background);

		@include focusOutlineColor(getThemeColor(focus-outline));

		&:hover,
		&:focus {
			background-color: getThemeColor(pressed-highlight);
			border-color: getThemeColor(background);
			color: getThemeColor(background);
		}

		&[aria-pressed='true'] {
			background-color: getThemeColor(background);
			border: 1px solid getThemeColor(background);
			color: getThemeColor(text);

			&:hover,
			&:focus {
				background-color: getThemeColor(highlight);
				border-color: getThemeColor(highlight);
				color: getThemeColor(text);
			}
		}

		&[disabled]:hover,
		&[disabled] {
			background: transparent;
			border: 1px solid getThemeColor(disabled);
			color: getThemeColor(disabled);
		}
	}
}

@mixin myftLozenge($theme: standard, $with-toggle-icon: false) {
	@include myftLozengeTheme($theme, $with-toggle-icon);
	@include oTypographySans($scale: -1, $weight: 'semibold');

	border-radius: 100px; // Number that will be larger than any possible height, so that works for all possible button sizes
	box-sizing: content-box;
	display: block;
	font-size: 14px;
	margin: 6px 4px 6px 2px;
	max-width: 200px;
	outline-offset: 2px;
	overflow: hidden;
	padding: 5px 12px;
	text-align: left;
	text-overflow: ellipsis;
	transition: border-color, background-color 0.5s ease;
	white-space: nowrap;
}
